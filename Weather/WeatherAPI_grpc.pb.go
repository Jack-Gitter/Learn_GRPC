// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: WeatherAPI.proto

package Weather

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeatherReporter_GetTodaysWeather_FullMethodName                  = "/WeatherReporter/GetTodaysWeather"
	WeatherReporter_GetPastTwoDaysWeatherServerStream_FullMethodName = "/WeatherReporter/GetPastTwoDaysWeatherServerStream"
)

// WeatherReporterClient is the client API for WeatherReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherReporterClient interface {
	GetTodaysWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error)
	GetPastTwoDaysWeatherServerStream(ctx context.Context, in *TwoDaysWeatherRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WeatherServerStreamReply], error)
}

type weatherReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherReporterClient(cc grpc.ClientConnInterface) WeatherReporterClient {
	return &weatherReporterClient{cc}
}

func (c *weatherReporterClient) GetTodaysWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeatherReply)
	err := c.cc.Invoke(ctx, WeatherReporter_GetTodaysWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherReporterClient) GetPastTwoDaysWeatherServerStream(ctx context.Context, in *TwoDaysWeatherRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WeatherServerStreamReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeatherReporter_ServiceDesc.Streams[0], WeatherReporter_GetPastTwoDaysWeatherServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TwoDaysWeatherRequest, WeatherServerStreamReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeatherReporter_GetPastTwoDaysWeatherServerStreamClient = grpc.ServerStreamingClient[WeatherServerStreamReply]

// WeatherReporterServer is the server API for WeatherReporter service.
// All implementations must embed UnimplementedWeatherReporterServer
// for forward compatibility.
type WeatherReporterServer interface {
	GetTodaysWeather(context.Context, *WeatherRequest) (*WeatherReply, error)
	GetPastTwoDaysWeatherServerStream(*TwoDaysWeatherRequest, grpc.ServerStreamingServer[WeatherServerStreamReply]) error
	mustEmbedUnimplementedWeatherReporterServer()
}

// UnimplementedWeatherReporterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeatherReporterServer struct{}

func (UnimplementedWeatherReporterServer) GetTodaysWeather(context.Context, *WeatherRequest) (*WeatherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodaysWeather not implemented")
}
func (UnimplementedWeatherReporterServer) GetPastTwoDaysWeatherServerStream(*TwoDaysWeatherRequest, grpc.ServerStreamingServer[WeatherServerStreamReply]) error {
	return status.Errorf(codes.Unimplemented, "method GetPastTwoDaysWeatherServerStream not implemented")
}
func (UnimplementedWeatherReporterServer) mustEmbedUnimplementedWeatherReporterServer() {}
func (UnimplementedWeatherReporterServer) testEmbeddedByValue()                         {}

// UnsafeWeatherReporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherReporterServer will
// result in compilation errors.
type UnsafeWeatherReporterServer interface {
	mustEmbedUnimplementedWeatherReporterServer()
}

func RegisterWeatherReporterServer(s grpc.ServiceRegistrar, srv WeatherReporterServer) {
	// If the following call pancis, it indicates UnimplementedWeatherReporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeatherReporter_ServiceDesc, srv)
}

func _WeatherReporter_GetTodaysWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherReporterServer).GetTodaysWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherReporter_GetTodaysWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherReporterServer).GetTodaysWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherReporter_GetPastTwoDaysWeatherServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TwoDaysWeatherRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherReporterServer).GetPastTwoDaysWeatherServerStream(m, &grpc.GenericServerStream[TwoDaysWeatherRequest, WeatherServerStreamReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeatherReporter_GetPastTwoDaysWeatherServerStreamServer = grpc.ServerStreamingServer[WeatherServerStreamReply]

// WeatherReporter_ServiceDesc is the grpc.ServiceDesc for WeatherReporter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherReporter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherReporter",
	HandlerType: (*WeatherReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodaysWeather",
			Handler:    _WeatherReporter_GetTodaysWeather_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPastTwoDaysWeatherServerStream",
			Handler:       _WeatherReporter_GetPastTwoDaysWeatherServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "WeatherAPI.proto",
}
